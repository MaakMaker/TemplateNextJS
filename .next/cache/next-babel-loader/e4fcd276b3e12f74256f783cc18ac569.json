{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { auth, facebookAuthProvider, githubAuthProvider, googleAuthProvider, twitterAuthProvider } from \"../firebaseConfig/index\";\nconst authContext = /*#__PURE__*/createContext(); // Provider component that wraps your app and makes auth object ..\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth\n  }, children);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: isLoadingUser,\n    1: setLoadingUser\n  } = useState(true);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n\n  const fetchStart = () => {\n    setLoading(true);\n    setError('');\n  };\n\n  const fetchSuccess = () => {\n    setLoading(false);\n    setError('');\n  };\n\n  const fetchError = error => {\n    setLoading(false);\n    setError(error.message);\n  }; // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n\n  const loginWithSocial = (platform, callbackFun) => {\n    let authProvider = googleAuthProvider;\n\n    if (platform === 'facebook') {\n      authProvider = facebookAuthProvider;\n    }\n\n    if (platform === 'github') {\n      authProvider = githubAuthProvider;\n    }\n\n    if (platform === 'twitter') {\n      authProvider = twitterAuthProvider;\n    }\n\n    try {\n      fetchStart();\n      return auth.signInWithPopup(authProvider).then(response => {\n        fetchSuccess();\n        setUser(response.user);\n        if (callbackFun) callbackFun();\n        return response.user;\n      }).catch(error => {\n        fetchError(error);\n      });\n    } catch (error) {\n      fetchError(error);\n    }\n  };\n\n  const login = (email, password, callbackFun) => {\n    try {\n      fetchStart();\n      return auth.signInWithEmailAndPassword(email, password).then(response => {\n        fetchSuccess();\n        setUser(response.user);\n        if (callbackFun) callbackFun();\n        return response.user;\n      }).catch(error => {\n        fetchError(error);\n      });\n    } catch (error) {\n      fetchError(error);\n    }\n  };\n\n  const signup = (email, password, callbackFun) => {\n    try {\n      fetchStart();\n      return auth.createUserWithEmailAndPassword(email, password).then(response => {\n        fetchSuccess();\n        setUser(response.user);\n        if (callbackFun) callbackFun();\n        return response.user;\n      }).catch(error => {\n        fetchError(error);\n      });\n    } catch (error) {\n      fetchError(error);\n    }\n  };\n\n  const signOut = () => {\n    return auth.signOut().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = (email, callbackFun) => {\n    try {\n      fetchStart();\n      return auth.sendPasswordResetEmail(email).then(() => {\n        fetchSuccess();\n        if (callbackFun) callbackFun();\n        return true;\n      }).catch(error => {\n        fetchError(error);\n      });\n    } catch (error) {\n      fetchError(error);\n    }\n  };\n\n  const confirmPasswordReset = (code, password, callbackFun) => {\n    try {\n      fetchStart();\n      return auth.confirmPasswordReset(code, password).then(() => {\n        fetchSuccess();\n        if (callbackFun) callbackFun();\n        return true;\n      }).catch(error => {\n        fetchError(error);\n      });\n    } catch (error) {\n      fetchError(error);\n    }\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n\n      setLoadingUser(false);\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []); // Return the user object and auth methods\n\n  return {\n    isLoadingUser,\n    isLoading,\n    user,\n    error,\n    login,\n    signup,\n    signOut,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    loginWithSocial\n  };\n}\n\nexport const isUnRestrictedRoute = pathname => {\n  return pathname === '/signin' || pathname === '/signup';\n};","map":{"version":3,"sources":["D:/TemplateAdminPro/util/use-auth.js"],"names":["React","useState","useEffect","useContext","createContext","auth","facebookAuthProvider","githubAuthProvider","googleAuthProvider","twitterAuthProvider","authContext","ProvideAuth","children","useProvideAuth","useAuth","user","setUser","isLoadingUser","setLoadingUser","isLoading","setLoading","error","setError","fetchStart","fetchSuccess","fetchError","message","loginWithSocial","platform","callbackFun","authProvider","signInWithPopup","then","response","catch","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","signOut","sendPasswordResetEmail","confirmPasswordReset","code","unsubscribe","onAuthStateChanged","isUnRestrictedRoute","pathname"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext, createContext} from \"react\";\r\nimport {\r\n  auth,\r\n  facebookAuthProvider,\r\n  githubAuthProvider,\r\n  googleAuthProvider,\r\n  twitterAuthProvider\r\n} from \"../firebaseConfig/index\";\r\n\r\nconst authContext = createContext();\r\n\r\n\r\n// Provider component that wraps your app and makes auth object ..\r\n// ... available to any child component that calls useAuth().\r\n\r\nexport function ProvideAuth({children}) {\r\n  const auth = useProvideAuth();\r\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\r\n}\r\n\r\n// Hook for child components to get the auth object ...\r\n// ... and re-render when it changes.\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\n\r\n// Provider hook that creates auth object and handles state\r\n\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoadingUser, setLoadingUser] = useState(true);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchStart = () => {\r\n    setLoading(true);\r\n    setError('');\r\n  }\r\n\r\n  const fetchSuccess = () => {\r\n    setLoading(false);\r\n    setError('');\r\n  }\r\n\r\n  const fetchError = (error) => {\r\n    setLoading(false);\r\n    setError(error.message);\r\n  }\r\n\r\n  // Wrap any Firebase methods we want to use making sure ...\r\n  // ... to save the user to state.\r\n\r\n  const loginWithSocial = (platform, callbackFun) => {\r\n    let authProvider = googleAuthProvider;\r\n    if (platform === 'facebook') {\r\n      authProvider = facebookAuthProvider;\r\n    }\r\n\r\n    if (platform === 'github') {\r\n      authProvider = githubAuthProvider;\r\n    }\r\n\r\n    if (platform === 'twitter') {\r\n      authProvider = twitterAuthProvider;\r\n    }\r\n\r\n    try {\r\n      fetchStart();\r\n      return auth.signInWithPopup(authProvider)\r\n        .then(response => {\r\n          fetchSuccess();\r\n          setUser(response.user);\r\n          if (callbackFun) callbackFun();\r\n          return response.user;\r\n        }).catch(error => {\r\n          fetchError(error);\r\n        });\r\n    } catch (error) {\r\n      fetchError(error);\r\n    }\r\n  }\r\n\r\n  const login = (email, password, callbackFun) => {\r\n    try {\r\n      fetchStart();\r\n      return auth.signInWithEmailAndPassword(email, password)\r\n        .then(response => {\r\n          fetchSuccess();\r\n          setUser(response.user);\r\n          if (callbackFun) callbackFun();\r\n          return response.user;\r\n        }).catch(error => {\r\n          fetchError(error);\r\n        });\r\n    } catch (error) {\r\n      fetchError(error);\r\n    }\r\n  };\r\n\r\n  const signup = (email, password, callbackFun) => {\r\n    try {\r\n      fetchStart();\r\n      return auth.createUserWithEmailAndPassword(email, password)\r\n        .then(response => {\r\n          fetchSuccess();\r\n          setUser(response.user);\r\n          if (callbackFun) callbackFun();\r\n          return response.user;\r\n        }).catch(error => {\r\n          fetchError(error);\r\n        });\r\n    } catch (error) {\r\n      fetchError(error);\r\n    }\r\n  };\r\n\r\n  const signOut = () => {\r\n    return auth.signOut()\r\n      .then(() => {\r\n        setUser(false);\r\n      });\r\n  };\r\n\r\n  const sendPasswordResetEmail = (email, callbackFun) => {\r\n    try {\r\n      fetchStart();\r\n      return auth.sendPasswordResetEmail(email)\r\n        .then(() => {\r\n          fetchSuccess();\r\n          if (callbackFun) callbackFun();\r\n          return true;\r\n        }).catch(error => {\r\n          fetchError(error);\r\n        });\r\n    } catch (error) {\r\n      fetchError(error);\r\n    }\r\n  };\r\n\r\n  const confirmPasswordReset = (code, password, callbackFun) => {\r\n    try {\r\n      fetchStart();\r\n      return auth.confirmPasswordReset(code, password)\r\n        .then(() => {\r\n          fetchSuccess();\r\n          if (callbackFun) callbackFun();\r\n          return true;\r\n        }).catch(error => {\r\n          fetchError(error);\r\n        });\r\n    } catch (error) {\r\n      fetchError(error);\r\n    }\r\n  };\r\n\r\n  // Subscribe to user on mount\r\n  // Because this sets state in the callback it will cause any ...\r\n  // ... component that utilizes this hook to re-render with the ...\r\n  // ... latest auth object.\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      if (user) {\r\n        setUser(user);\r\n      } else {\r\n        setUser(false);\r\n      }\r\n\r\n      setLoadingUser(false);\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    isLoadingUser,\r\n    isLoading,\r\n    user,\r\n    error,\r\n    login,\r\n    signup,\r\n    signOut,\r\n    sendPasswordResetEmail,\r\n    confirmPasswordReset,\r\n    loginWithSocial\r\n  };\r\n}\r\n\r\nexport const isUnRestrictedRoute = (pathname) => {\r\n  return pathname === '/signin' || pathname === '/signup'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}