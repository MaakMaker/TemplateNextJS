{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchStickyRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchSticky),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(updateSticky),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { fetchStickySuccess } from '../actions';\nimport { database } from '../../firebaseConfig/index';\nimport { GET_STICKY, NOTES_UPDATE } from '../../constants/ActionTypes';\nimport { fetchError } from \"../actions\";\n\nvar getSticky = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return database.ref('notes').once('value').then(function (snapshot) {\n              var notess = [];\n              snapshot.forEach(function (rawData) {\n                notess.push(rawData.val());\n              });\n              return notess;\n            })[\"catch\"](function (error) {\n              return error;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSticky() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar updateStickyRequest = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var notesList;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            notesList = _ref2.notesList;\n            _context2.next = 3;\n            return database.ref('notes').set(notesList).then(function (notesList) {\n              return notesList;\n            })[\"catch\"](function (notesList) {\n              return notesList;\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updateStickyRequest(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nfunction fetchStickyRequest() {\n  var fetchedSticky;\n  return _regeneratorRuntime.wrap(function fetchStickyRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(getSticky);\n\n        case 3:\n          fetchedSticky = _context3.sent;\n          _context3.next = 6;\n          return put(fetchStickySuccess(fetchedSticky));\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put(fetchError(_context3.t0));\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nexport function fetchSticky() {\n  return _regeneratorRuntime.wrap(function fetchSticky$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(GET_STICKY, fetchStickyRequest);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function updateSticky() {\n  return _regeneratorRuntime.wrap(function updateSticky$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(NOTES_UPDATE, updateStickyRequest);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(fetchSticky), fork(updateSticky)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["D:/TemplateAdminPro/redux/sagas/Notes.js"],"names":["fetchStickyRequest","fetchSticky","updateSticky","rootSaga","all","call","fork","put","takeEvery","fetchStickySuccess","database","GET_STICKY","NOTES_UPDATE","fetchError","getSticky","ref","once","then","snapshot","notess","forEach","rawData","push","val","error","updateStickyRequest","notesList","set","fetchedSticky"],"mappings":";;;oDAwBUA,kB;qDASOC,W;qDAIAC,Y;qDAIQC,Q;;AAzCzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,QAA8C,oBAA9C;AACA,SAAQC,kBAAR,QAAiC,YAAjC;AACA,SAAQC,QAAR,QAAuB,4BAAvB;AACA,SAAQC,UAAR,EAAoBC,YAApB,QAAuC,6BAAvC;AACA,SAAQC,UAAR,QAAyB,YAAzB;;AAEA,IAAMC,SAAS;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVJ,QAAQ,CAACK,GAAT,CAAa,OAAb,EAAsBC,IAAtB,CAA2B,OAA3B,EACHC,IADG,CACE,UAACC,QAAD,EAAc;AAClB,kBAAMC,MAAM,GAAG,EAAf;AACAD,cAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5BF,gBAAAA,MAAM,CAACG,IAAP,CAAYD,OAAO,CAACE,GAAR,EAAZ;AACD,eAFD;AAGA,qBAAOJ,MAAP;AACD,aAPG,WAQG,UAAAK,KAAK;AAAA,qBAAIA,KAAJ;AAAA,aARR,CADU;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATV,SAAS;AAAA;AAAA;AAAA,GAAf;;AAYA,IAAMW,mBAAmB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,YAAAA,SAAR,SAAQA,SAAR;AAAA;AAAA,mBACnBhB,QAAQ,CAACK,GAAT,CAAa,OAAb,EAAsBY,GAAtB,CAA0BD,SAA1B,EACJT,IADI,CACC,UAAAS,SAAS;AAAA,qBAAIA,SAAJ;AAAA,aADV,WAEE,UAAAA,SAAS;AAAA,qBAAIA,SAAJ;AAAA,aAFX,CADmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBD,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;AAMA,SAAUzB,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE0B,iBAAMK,IAAI,CAACS,SAAD,CAAV;;AAF1B;AAEUc,UAAAA,aAFV;AAAA;AAGI,iBAAMrB,GAAG,CAACE,kBAAkB,CAACmB,aAAD,CAAnB,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMrB,GAAG,CAACM,UAAU,cAAX,CAAT;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,OAAO,SAAUZ,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMO,SAAS,CAACG,UAAD,EAAaX,kBAAb,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMM,SAAS,CAACI,YAAD,EAAea,mBAAf,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,eAAe,SAAUtB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACL,WAAD,CAAL,EACRK,IAAI,CAACJ,YAAD,CADI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, call, fork, put, takeEvery} from \"redux-saga/effects\";\r\nimport {fetchStickySuccess} from '../actions';\r\nimport {database} from '../../firebaseConfig/index';\r\nimport {GET_STICKY, NOTES_UPDATE} from '../../constants/ActionTypes';\r\nimport {fetchError} from \"../actions\";\r\n\r\nconst getSticky = async () =>\r\n  await database.ref('notes').once('value')\r\n    .then((snapshot) => {\r\n      const notess = [];\r\n      snapshot.forEach((rawData) => {\r\n        notess.push(rawData.val());\r\n      });\r\n      return notess;\r\n    })\r\n    .catch(error => error);\r\n\r\n\r\nconst updateStickyRequest = async ({notesList}) => {\r\n  await  database.ref('notes').set(notesList)\r\n    .then(notesList => notesList)\r\n    .catch(notesList => notesList);\r\n};\r\n\r\nfunction* fetchStickyRequest() {\r\n  try {\r\n    const fetchedSticky = yield call(getSticky);\r\n    yield put(fetchStickySuccess(fetchedSticky));\r\n  } catch (error) {\r\n    yield put(fetchError(error));\r\n  }\r\n}\r\n\r\nexport function* fetchSticky() {\r\n  yield takeEvery(GET_STICKY, fetchStickyRequest);\r\n}\r\n\r\nexport function* updateSticky() {\r\n  yield takeEvery(NOTES_UPDATE, updateStickyRequest);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(fetchSticky),\r\n    fork(updateSticky)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}