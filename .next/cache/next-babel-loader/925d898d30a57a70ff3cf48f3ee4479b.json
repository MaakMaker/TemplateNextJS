{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, Markers, ZoomableGroup } from \"react-simple-maps\";\nimport { scaleLinear } from \"d3-scale\";\nimport cities from \"./static/world-most-populous-cities.json\";\nimport geography from \"./static/world-50m.json\";\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 980,\n  margin: \"0 auto\"\n};\nconst cityScale = scaleLinear().domain([0, 37843000]).range([1, 25]);\n\nconst BubbleMap = () => {\n  return __jsx(\"div\", {\n    style: wrapperStyles\n  }, __jsx(ComposableMap, {\n    projectionConfig: {\n      scale: 180\n    },\n    width: 980,\n    height: 450,\n    style: {\n      width: \"100%\",\n      height: \"auto\"\n    }\n  }, __jsx(ZoomableGroup, {\n    center: [0, 20],\n    disablePanning: true\n  }, __jsx(Geographies, {\n    geography: geography\n  }, (geographies, projection) => geographies.map((geography, i) => geography.id !== \"ATA\" && __jsx(Geography, {\n    key: i,\n    geography: geography,\n    projection: projection,\n    style: {\n      default: {\n        fill: \"#ECEFF1\",\n        stroke: \"#607D8B\",\n        strokeWidth: 0.75,\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#ECEFF1\",\n        stroke: \"#607D8B\",\n        strokeWidth: 0.75,\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#ECEFF1\",\n        stroke: \"#607D8B\",\n        strokeWidth: 0.75,\n        outline: \"none\"\n      }\n    }\n  }))), __jsx(Markers, null, cities.map((city, i) => __jsx(Marker, {\n    key: i,\n    marker: city\n  }, __jsx(\"circle\", {\n    cx: 0,\n    cy: 0,\n    r: cityScale(city.population),\n    fill: \"rgba(255,87,34,0.8)\",\n    stroke: \"#607D8B\",\n    strokeWidth: \"2\"\n  })))))));\n};\n\nexport default BubbleMap;","map":{"version":3,"sources":["D:/TemplateAdminPro/app/components/dashboard/CRM/BubbleMap/index.js"],"names":["React","ComposableMap","Geographies","Geography","Marker","Markers","ZoomableGroup","scaleLinear","cities","geography","wrapperStyles","width","maxWidth","margin","cityScale","domain","range","BubbleMap","scale","height","geographies","projection","map","i","id","default","fill","stroke","strokeWidth","outline","hover","pressed","city","population"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,OAAvD,EAAgEC,aAAhE,QAAoF,mBAApF;AACA,SAAQC,WAAR,QAA0B,UAA1B;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,MADa;AAEpBC,EAAAA,QAAQ,EAAE,GAFU;AAGpBC,EAAAA,MAAM,EAAE;AAHY,CAAtB;AAMA,MAAMC,SAAS,GAAGP,WAAW,GAC1BQ,MADe,CACR,CAAC,CAAD,EAAI,QAAJ,CADQ,EAEfC,KAFe,CAET,CAAC,CAAD,EAAI,EAAJ,CAFS,CAAlB;;AAIA,MAAMC,SAAS,GAAG,MAAM;AAEtB,SACE;AAAK,IAAA,KAAK,EAAEP;AAAZ,KACE,MAAC,aAAD;AACE,IAAA,gBAAgB,EAAE;AAACQ,MAAAA,KAAK,EAAE;AAAR,KADpB;AAEE,IAAA,KAAK,EAAE,GAFT;AAGE,IAAA,MAAM,EAAE,GAHV;AAIE,IAAA,KAAK,EAAE;AACLP,MAAAA,KAAK,EAAE,MADF;AAELQ,MAAAA,MAAM,EAAE;AAFH;AAJT,KASE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAvB;AAAgC,IAAA,cAAc;AAA9C,KACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEV;AAAxB,KACG,CAACW,WAAD,EAAcC,UAAd,KACCD,WAAW,CAACE,GAAZ,CAAgB,CAACb,SAAD,EAAYc,CAAZ,KACdd,SAAS,CAACe,EAAV,KAAiB,KAAjB,IACE,MAAC,SAAD;AACE,IAAA,GAAG,EAAED,CADP;AAEE,IAAA,SAAS,EAAEd,SAFb;AAGE,IAAA,UAAU,EAAEY,UAHd;AAIE,IAAA,KAAK,EAAE;AACLI,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,MAAM,EAAE,SAFD;AAGPC,QAAAA,WAAW,EAAE,IAHN;AAIPC,QAAAA,OAAO,EAAE;AAJF,OADJ;AAOLC,MAAAA,KAAK,EAAE;AACLJ,QAAAA,IAAI,EAAE,SADD;AAELC,QAAAA,MAAM,EAAE,SAFH;AAGLC,QAAAA,WAAW,EAAE,IAHR;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAPF;AAaLE,MAAAA,OAAO,EAAE;AACPL,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,MAAM,EAAE,SAFD;AAGPC,QAAAA,WAAW,EAAE,IAHN;AAIPC,QAAAA,OAAO,EAAE;AAJF;AAbJ;AAJT,IAFJ,CAFJ,CADF,EAgCE,MAAC,OAAD,QAEIrB,MAAM,CAACc,GAAP,CAAW,CAACU,IAAD,EAAOT,CAAP,KACT,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,CAAb;AAAgB,IAAA,MAAM,EAAES;AAAxB,KACE;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,EAAE,EAAE,CAFN;AAGE,IAAA,CAAC,EAAElB,SAAS,CAACkB,IAAI,CAACC,UAAN,CAHd;AAIE,IAAA,IAAI,EAAC,qBAJP;AAKE,IAAA,MAAM,EAAC,SALT;AAME,IAAA,WAAW,EAAC;AANd,IADF,CADF,CAFJ,CAhCF,CATF,CADF,CADF;AA+DD,CAjED;;AAmEA,eAAehB,SAAf","sourcesContent":["import React from \"react\";\r\nimport {ComposableMap, Geographies, Geography, Marker, Markers, ZoomableGroup} from \"react-simple-maps\";\r\nimport {scaleLinear} from \"d3-scale\";\r\nimport cities from \"./static/world-most-populous-cities.json\";\r\nimport geography from \"./static/world-50m.json\";\r\n\r\nconst wrapperStyles = {\r\n  width: \"100%\",\r\n  maxWidth: 980,\r\n  margin: \"0 auto\",\r\n};\r\n\r\nconst cityScale = scaleLinear()\r\n  .domain([0, 37843000])\r\n  .range([1, 25]);\r\n\r\nconst BubbleMap = () => {\r\n\r\n  return (\r\n    <div style={wrapperStyles}>\r\n      <ComposableMap\r\n        projectionConfig={{scale: 180}}\r\n        width={980}\r\n        height={450}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"auto\",\r\n        }}\r\n      >\r\n        <ZoomableGroup center={[0, 20]} disablePanning>\r\n          <Geographies geography={geography}>\r\n            {(geographies, projection) =>\r\n              geographies.map((geography, i) =>\r\n                geography.id !== \"ATA\" && (\r\n                  <Geography\r\n                    key={i}\r\n                    geography={geography}\r\n                    projection={projection}\r\n                    style={{\r\n                      default: {\r\n                        fill: \"#ECEFF1\",\r\n                        stroke: \"#607D8B\",\r\n                        strokeWidth: 0.75,\r\n                        outline: \"none\",\r\n                      },\r\n                      hover: {\r\n                        fill: \"#ECEFF1\",\r\n                        stroke: \"#607D8B\",\r\n                        strokeWidth: 0.75,\r\n                        outline: \"none\",\r\n                      },\r\n                      pressed: {\r\n                        fill: \"#ECEFF1\",\r\n                        stroke: \"#607D8B\",\r\n                        strokeWidth: 0.75,\r\n                        outline: \"none\",\r\n                      },\r\n                    }}\r\n                  />\r\n                ))}\r\n          </Geographies>\r\n          <Markers>\r\n            {\r\n              cities.map((city, i) => (\r\n                <Marker key={i} marker={city}>\r\n                  <circle\r\n                    cx={0}\r\n                    cy={0}\r\n                    r={cityScale(city.population)}\r\n                    fill=\"rgba(255,87,34,0.8)\"\r\n                    stroke=\"#607D8B\"\r\n                    strokeWidth=\"2\"\r\n                  />\r\n                </Marker>\r\n              ))\r\n            }\r\n          </Markers>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default BubbleMap\r\n"]},"metadata":{},"sourceType":"module"}