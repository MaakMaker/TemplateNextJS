{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { DELETE_CONTACT_SUCCESS, GET_All_CONTACT_SUCCESS, ON_ADD_CONTACT_SUCCESS, UPDATE_CONTACT_SUCCESS } from \"../../constants/ActionTypes\";\nvar INIT_STATE = {\n  contactList: [],\n  selectedContact: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_All_CONTACT_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          contactList: action.payload\n        });\n      }\n\n    case UPDATE_CONTACT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contactList: state.contactList.map(function (contact) {\n          return contact.id === action.payload.id ? action.payload : contact;\n        })\n      });\n\n    case DELETE_CONTACT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contactList: state.contactList.filter(function (contact) {\n          return contact.id !== action.payload.id;\n        })\n      });\n\n    case ON_ADD_CONTACT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contactList: action.payload.contact(state.contactList)\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/linhm/Downloads/Telegram Desktop/TemplateNextjs/redux/reducers/Contact.js"],"names":["DELETE_CONTACT_SUCCESS","GET_All_CONTACT_SUCCESS","ON_ADD_CONTACT_SUCCESS","UPDATE_CONTACT_SUCCESS","INIT_STATE","contactList","selectedContact","state","action","type","payload","map","contact","id","filter"],"mappings":";;;;;;AAAA,SACEA,sBADF,EAEEC,uBAFF,EAGEC,sBAHF,EAIEC,sBAJF,QAKO,6BALP;AAOA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,WAAW,EAAE,EADI;AAEjBC,EAAAA,eAAe,EAAE;AAFA,CAAnB;AAMA,gBAAe,YAAgC;AAAA,MAA/BC,KAA+B,uEAAvBH,UAAuB;AAAA,MAAXI,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAKR,uBAAL;AAA8B;AAC5B,+CACKM,KADL;AAEEF,UAAAA,WAAW,EAAEG,MAAM,CAACE;AAFtB;AAID;;AAED,SAAKP,sBAAL;AACE,6CACKI,KADL;AAEEF,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBM,GAAlB,CAAsB,UAACC,OAAD;AAAA,iBAAaA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACE,OAAP,CAAeG,EAA9B,GAAmCL,MAAM,CAACE,OAA1C,GAAoDE,OAAjE;AAAA,SAAtB;AAFf;;AAKF,SAAKZ,sBAAL;AACE,6CACKO,KADL;AAEEF,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBS,MAAlB,CAAyB,UAACF,OAAD;AAAA,iBAAaA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACE,OAAP,CAAeG,EAA3C;AAAA,SAAzB;AAFf;;AAKF,SAAKX,sBAAL;AACE,6CACKK,KADL;AAEEF,QAAAA,WAAW,EAAEG,MAAM,CAACE,OAAP,CAAeE,OAAf,CAAuBL,KAAK,CAACF,WAA7B;AAFf;;AAKF;AACE,aAAOE,KAAP;AA7BJ;AA+BD,CAhCD","sourcesContent":["import {\r\n  DELETE_CONTACT_SUCCESS,\r\n  GET_All_CONTACT_SUCCESS,\r\n  ON_ADD_CONTACT_SUCCESS,\r\n  UPDATE_CONTACT_SUCCESS\r\n} from \"../../constants/ActionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  contactList: [],\r\n  selectedContact: []\r\n};\r\n\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n\r\n    case GET_All_CONTACT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        contactList: action.payload,\r\n      }\r\n    }\r\n\r\n    case UPDATE_CONTACT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        contactList: state.contactList.map((contact) => contact.id === action.payload.id ? action.payload : contact),\r\n      };\r\n\r\n    case DELETE_CONTACT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        contactList: state.contactList.filter((contact) => contact.id !== action.payload.id),\r\n      };\r\n\r\n    case ON_ADD_CONTACT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        contactList: action.payload.contact(state.contactList),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}