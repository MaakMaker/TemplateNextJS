{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Drawer, Layout } from \"antd\";\nimport SidebarContent from \"./SidebarContent\";\nimport { toggleCollapsedSideNav, updateWindowWidth } from \"../../../redux/actions/Setting\";\nimport { NAV_STYLE_DRAWER, NAV_STYLE_FIXED, NAV_STYLE_MINI_SIDEBAR, NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR, NAV_STYLE_NO_HEADER_MINI_SIDEBAR, TAB_SIZE, THEME_TYPE_LITE } from \"../../../constants/ThemeSetting\";\nvar Sider = Layout.Sider;\n\nvar Sidebar = function Sidebar() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (_ref) {\n    var settings = _ref.settings;\n    return settings;\n  }),\n      themeType = _useSelector.themeType,\n      navCollapsed = _useSelector.navCollapsed,\n      width = _useSelector.width,\n      navStyle = _useSelector.navStyle;\n\n  var onToggleCollapsedNav = function onToggleCollapsedNav() {\n    dispatch(toggleCollapsedSideNav(!navCollapsed));\n  };\n\n  useEffect(function () {\n    window.addEventListener('resize', function () {\n      dispatch(updateWindowWidth(window.innerWidth));\n    });\n  }, [dispatch]);\n  var drawerStyle = \"gx-collapsed-sidebar\";\n\n  if (navStyle === NAV_STYLE_FIXED) {\n    drawerStyle = \"\";\n  } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n    drawerStyle = \"gx-mini-sidebar gx-mini-custom-sidebar\";\n  } else if (navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n    drawerStyle = \"gx-custom-sidebar\";\n  } else if (navStyle === NAV_STYLE_MINI_SIDEBAR) {\n    drawerStyle = \"gx-mini-sidebar\";\n  } else if (navStyle === NAV_STYLE_DRAWER) {\n    drawerStyle = \"gx-collapsed-sidebar\";\n  }\n\n  if ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) && width < TAB_SIZE) {\n    drawerStyle = \"gx-collapsed-sidebar\";\n  }\n\n  return __jsx(Sider, {\n    className: \"gx-app-sidebar \".concat(drawerStyle, \" \").concat(themeType !== THEME_TYPE_LITE ? 'gx-layout-sider-dark' : null),\n    trigger: null,\n    collapsed: width < TAB_SIZE ? false : navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n    theme: themeType === THEME_TYPE_LITE ? \"lite\" : \"dark\",\n    collapsible: true\n  }, navStyle === NAV_STYLE_DRAWER || width < TAB_SIZE ? __jsx(Drawer, {\n    className: \"gx-drawer-sidebar \".concat(themeType !== THEME_TYPE_LITE ? 'gx-drawer-sidebar-dark' : null),\n    placement: \"left\",\n    closable: false,\n    onClose: onToggleCollapsedNav,\n    visible: navCollapsed\n  }, __jsx(SidebarContent, null)) : __jsx(SidebarContent, null));\n};\n\n_s(Sidebar, \"jJZ7pNO7m8qemEriUaOF3npP9Dg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["C:/Users/linhm/Downloads/Telegram Desktop/TemplateNextjs/app/core/Sidebar/index.js"],"names":["React","useEffect","useDispatch","useSelector","Drawer","Layout","SidebarContent","toggleCollapsedSideNav","updateWindowWidth","NAV_STYLE_DRAWER","NAV_STYLE_FIXED","NAV_STYLE_MINI_SIDEBAR","NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR","NAV_STYLE_NO_HEADER_MINI_SIDEBAR","TAB_SIZE","THEME_TYPE_LITE","Sider","Sidebar","dispatch","settings","themeType","navCollapsed","width","navStyle","onToggleCollapsedNav","window","addEventListener","innerWidth","drawerStyle"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Drawer, Layout} from \"antd\";\r\n\r\nimport SidebarContent from \"./SidebarContent\";\r\nimport {toggleCollapsedSideNav, updateWindowWidth} from \"../../../redux/actions/Setting\";\r\nimport {\r\n  NAV_STYLE_DRAWER,\r\n  NAV_STYLE_FIXED,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  TAB_SIZE,\r\n  THEME_TYPE_LITE\r\n} from \"../../../constants/ThemeSetting\";\r\n\r\nconst {Sider} = Layout;\r\n\r\nconst Sidebar = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const {themeType, navCollapsed, width, navStyle} = useSelector(({settings}) => settings);\r\n\r\n\r\n  const onToggleCollapsedNav = () => {\r\n    dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', () => {\r\n      dispatch(updateWindowWidth(window.innerWidth));\r\n    })\r\n  }, [dispatch]);\r\n\r\n\r\n  let drawerStyle = \"gx-collapsed-sidebar\";\r\n\r\n  if (navStyle === NAV_STYLE_FIXED) {\r\n    drawerStyle = \"\";\r\n  } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n    drawerStyle = \"gx-mini-sidebar gx-mini-custom-sidebar\";\r\n  } else if (navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\r\n    drawerStyle = \"gx-custom-sidebar\"\r\n  } else if (navStyle === NAV_STYLE_MINI_SIDEBAR) {\r\n    drawerStyle = \"gx-mini-sidebar\";\r\n  } else if (navStyle === NAV_STYLE_DRAWER) {\r\n    drawerStyle = \"gx-collapsed-sidebar\"\r\n  }\r\n  if ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR\r\n    || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) && width < TAB_SIZE) {\r\n    drawerStyle = \"gx-collapsed-sidebar\"\r\n  }\r\n  return (\r\n    <Sider\r\n      className={`gx-app-sidebar ${drawerStyle} ${themeType !== THEME_TYPE_LITE ? 'gx-layout-sider-dark' : null}`}\r\n      trigger={null}\r\n      collapsed={(width < TAB_SIZE ? false : navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR)}\r\n      theme={themeType === THEME_TYPE_LITE ? \"lite\" : \"dark\"}\r\n      collapsible>\r\n      {\r\n        navStyle === NAV_STYLE_DRAWER || width < TAB_SIZE ?\r\n          <Drawer\r\n            className={`gx-drawer-sidebar ${themeType !== THEME_TYPE_LITE ? 'gx-drawer-sidebar-dark' : null}`}\r\n            placement=\"left\"\r\n            closable={false}\r\n            onClose={onToggleCollapsedNav}\r\n            visible={navCollapsed}>\r\n            <SidebarContent/>\r\n          </Drawer> :\r\n          <SidebarContent/>\r\n      }\r\n    </Sider>)\r\n};\r\nexport default Sidebar;\r\n"]},"metadata":{},"sourceType":"module"}