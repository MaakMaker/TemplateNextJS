{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Link from \"next/link\";\nimport { onNavStyleChange, toggleCollapsedSideNav } from \"../../../redux/actions/Setting\";\nimport { NAV_STYLE_DRAWER, NAV_STYLE_FIXED, NAV_STYLE_MINI_SIDEBAR, NAV_STYLE_NO_HEADER_MINI_SIDEBAR, TAB_SIZE, THEME_TYPE_LITE } from \"../../../constants/ThemeSetting\";\n\nconst SidebarLogo = () => {\n  const dispatch = useDispatch();\n  const {\n    width,\n    themeType,\n    navCollapsed\n  } = useSelector(({\n    settings\n  }) => settings);\n  let navStyle = useSelector(({\n    settings\n  }) => settings.navStyle);\n\n  if (width < TAB_SIZE && navStyle === NAV_STYLE_FIXED) {\n    navStyle = NAV_STYLE_DRAWER;\n  }\n\n  return __jsx(\"div\", {\n    className: \"gx-layout-sider-header\"\n  }, navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR ? __jsx(\"div\", {\n    className: \"gx-linebar\"\n  }, __jsx(\"i\", {\n    className: `gx-icon-btn icon icon-${navStyle === NAV_STYLE_MINI_SIDEBAR ? 'menu-unfold' : 'menu-fold'} ${themeType !== THEME_TYPE_LITE ? 'gx-text-white' : ''}`,\n    onClick: () => {\n      if (navStyle === NAV_STYLE_DRAWER) {\n        dispatch(toggleCollapsedSideNav(!navCollapsed));\n      } else if (navStyle === NAV_STYLE_FIXED) {\n        dispatch(onNavStyleChange(NAV_STYLE_MINI_SIDEBAR));\n      } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n        dispatch(toggleCollapsedSideNav(!navCollapsed));\n      } else {\n        dispatch(onNavStyleChange(NAV_STYLE_FIXED));\n      }\n    }\n  })) : null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", {\n    className: \"gx-site-logo\"\n  }, navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR && width >= TAB_SIZE ? __jsx(\"img\", {\n    alt: \"lo\",\n    src: \"/images/w-logo.png\"\n  }) : themeType === THEME_TYPE_LITE ? __jsx(\"img\", {\n    alt: \"logo1\",\n    src: \"/images/logo-white.png\"\n  }) : __jsx(\"img\", {\n    alt: \"logo2\",\n    src: \"/images/logo.png\"\n  }))));\n};\n\nexport default SidebarLogo;","map":{"version":3,"sources":["D:/TemplateAdminPro/app/core/Sidebar/SidebarLogo.js"],"names":["React","useDispatch","useSelector","Link","onNavStyleChange","toggleCollapsedSideNav","NAV_STYLE_DRAWER","NAV_STYLE_FIXED","NAV_STYLE_MINI_SIDEBAR","NAV_STYLE_NO_HEADER_MINI_SIDEBAR","TAB_SIZE","THEME_TYPE_LITE","SidebarLogo","dispatch","width","themeType","navCollapsed","settings","navStyle"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAAQC,gBAAR,EAA0BC,sBAA1B,QAAuD,gCAAvD;AACA,SACEC,gBADF,EAEEC,eAFF,EAGEC,sBAHF,EAIEC,gCAJF,EAKEC,QALF,EAMEC,eANF,QAOO,iCAPP;;AAUA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAACa,IAAAA,KAAD;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAAmCd,WAAW,CAAC,CAAC;AAACe,IAAAA;AAAD,GAAD,KAAgBA,QAAjB,CAApD;AACA,MAAIC,QAAQ,GAAGhB,WAAW,CAAC,CAAC;AAACe,IAAAA;AAAD,GAAD,KAAgBA,QAAQ,CAACC,QAA1B,CAA1B;;AACA,MAAIJ,KAAK,GAAGJ,QAAR,IAAoBQ,QAAQ,KAAKX,eAArC,EAAsD;AACpDW,IAAAA,QAAQ,GAAGZ,gBAAX;AACD;;AACD,SACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACIY,QAAQ,KAAKX,eAAb,IAAgCW,QAAQ,KAAKV,sBAA9C,GAAwE;AAAK,IAAA,SAAS,EAAC;AAAf,KACvE;AACE,IAAA,SAAS,EAAG,yBAAwBU,QAAQ,KAAKV,sBAAb,GAAsC,aAAtC,GAAsD,WAAY,IAAGO,SAAS,KAAKJ,eAAd,GAAgC,eAAhC,GAAkD,EAAG,EADhK;AAEE,IAAA,OAAO,EAAE,MAAM;AACb,UAAIO,QAAQ,KAAKZ,gBAAjB,EAAmC;AACjCO,QAAAA,QAAQ,CAACR,sBAAsB,CAAC,CAACW,YAAF,CAAvB,CAAR;AACD,OAFD,MAEO,IAAIE,QAAQ,KAAKX,eAAjB,EAAkC;AACvCM,QAAAA,QAAQ,CAACT,gBAAgB,CAACI,sBAAD,CAAjB,CAAR;AACD,OAFM,MAEA,IAAIU,QAAQ,KAAKT,gCAAjB,EAAmD;AACxDI,QAAAA,QAAQ,CAACR,sBAAsB,CAAC,CAACW,YAAF,CAAvB,CAAR;AACD,OAFM,MAEA;AACLH,QAAAA,QAAQ,CAACT,gBAAgB,CAACG,eAAD,CAAjB,CAAR;AACD;AACF;AAZH,IADuE,CAAxE,GAeQ,IAhBX,EAkBE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE;AAAG,IAAA,SAAS,EAAC;AAAb,KACCW,QAAQ,KAAKT,gCAAb,IAAiDK,KAAK,IAAIJ,QAA1D,GACC;AAAK,IAAA,GAAG,EAAC,IAAT;AAAc,IAAA,GAAG,EAAG;AAApB,IADD,GAECK,SAAS,KAAKJ,eAAd,GACE;AAAK,IAAA,GAAG,EAAC,OAAT;AAAiB,IAAA,GAAG,EAAG;AAAvB,IADF,GAEE;AAAK,IAAA,GAAG,EAAC,OAAT;AAAiB,IAAA,GAAG,EAAG;AAAvB,IALJ,CADF,CAlBF,CADF;AA8BD,CArCD;;AAuCA,eAAeC,WAAf","sourcesContent":["import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Link from \"next/link\";\r\n\r\nimport {onNavStyleChange, toggleCollapsedSideNav} from \"../../../redux/actions/Setting\";\r\nimport {\r\n  NAV_STYLE_DRAWER,\r\n  NAV_STYLE_FIXED,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  TAB_SIZE,\r\n  THEME_TYPE_LITE\r\n} from \"../../../constants/ThemeSetting\";\r\n\r\n\r\nconst SidebarLogo = () => {\r\n  const dispatch = useDispatch();\r\n  const {width, themeType, navCollapsed} = useSelector(({settings}) => settings);\r\n  let navStyle = useSelector(({settings}) => settings.navStyle);\r\n  if (width < TAB_SIZE && navStyle === NAV_STYLE_FIXED) {\r\n    navStyle = NAV_STYLE_DRAWER;\r\n  }\r\n  return (\r\n    <div className=\"gx-layout-sider-header\">\r\n      {(navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR) ? <div className=\"gx-linebar\">\r\n        <i\r\n          className={`gx-icon-btn icon icon-${navStyle === NAV_STYLE_MINI_SIDEBAR ? 'menu-unfold' : 'menu-fold'} ${themeType !== THEME_TYPE_LITE ? 'gx-text-white' : ''}`}\r\n          onClick={() => {\r\n            if (navStyle === NAV_STYLE_DRAWER) {\r\n              dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n            } else if (navStyle === NAV_STYLE_FIXED) {\r\n              dispatch(onNavStyleChange(NAV_STYLE_MINI_SIDEBAR))\r\n            } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n              dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n            } else {\r\n              dispatch(onNavStyleChange(NAV_STYLE_FIXED))\r\n            }\r\n          }}\r\n        />\r\n      </div> : null}\r\n\r\n      <Link href=\"/\" >\r\n        <a className=\"gx-site-logo\">\r\n        {navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR && width >= TAB_SIZE ?\r\n          <img alt=\"lo\" src={(\"/images/w-logo.png\")}/> :\r\n          themeType === THEME_TYPE_LITE ?\r\n            <img alt=\"logo1\" src={(\"/images/logo-white.png\")}/> :\r\n            <img alt=\"logo2\" src={(\"/images/logo.png\")}/>}\r\n        </a>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarLogo;\r\n"]},"metadata":{},"sourceType":"module"}