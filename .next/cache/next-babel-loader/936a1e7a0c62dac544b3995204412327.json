{"ast":null,"code":"var __jsx = React.createElement;\n// import React, {useState} from \"react\";\n// import {Button, Drawer, Radio} from \"antd\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import CustomScrollbars from \"../../../util/CustomScrollbars\";\n// import {setThemeType} from \"../../../redux/actions/Setting\";\n//\n// import {\n//   BLUE,\n//   BLUE_DARK_TEXT_COLOR,\n//   BLUE_SEC,\n//   DARK_BLUE,\n//   DARK_BLUE_DARK_TEXT_COLOR,\n//   DARK_BLUE_SEC,\n//   DEEP_ORANGE,\n//   DEEP_ORANGE_DARK_TEXT_COLOR,\n//   DEEP_ORANGE_SEC,\n//   LAYOUT_TYPE_BOXED,\n//   LAYOUT_TYPE_FRAMED,\n//   LAYOUT_TYPE_FULL,\n//   LIGHT_BLUE,\n//   LIGHT_BLUE_DARK_TEXT_COLOR,\n//   LIGHT_BLUE_SEC,\n//   LIGHT_PURPLE,\n//   LIGHT_PURPLE_1,\n//   LIGHT_PURPLE_1_DARK_TEXT_COLOR,\n//   LIGHT_PURPLE_1_SEC,\n//   LIGHT_PURPLE_2,\n//   LIGHT_PURPLE_2_DARK_TEXT_COLOR,\n//   LIGHT_PURPLE_2_SEC,\n//   LIGHT_PURPLE_DARK_TEXT_COLOR,\n//   LIGHT_PURPLE_SEC,\n//   NAV_STYLE_ABOVE_HEADER,\n//   NAV_STYLE_BELOW_HEADER,\n//   NAV_STYLE_DARK_HORIZONTAL,\n//   NAV_STYLE_DEFAULT_HORIZONTAL,\n//   NAV_STYLE_DRAWER,\n//   NAV_STYLE_FIXED,\n//   NAV_STYLE_INSIDE_HEADER_HORIZONTAL,\n//   NAV_STYLE_MINI_SIDEBAR,\n//   NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\n//   NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n//   ORANGE,\n//   ORANGE_DARK_TEXT_COLOR,\n//   ORANGE_SEC,\n//   RED,\n//   RED_DARK_TEXT_COLOR,\n//   RED_SEC,\n//   THEME_TYPE_DARK,\n//   THEME_TYPE_LITE,\n//   THEME_TYPE_SEMI_DARK\n// } from \"../../../constants/ThemeSetting\";\n// import {onNavStyleChange} from \"../../../redux/actions\";\n//\n// const CustomizerSystem = () => {\n//\n//   const [isCustomizerOpened, setIsCustomizerOpened] = useState(false);\n//   const dispatch = useDispatch();\n//\n//   const themeType = useSelector(({settings}) => settings.themeType);\n//   const themeColor = useSelector(({settings}) => settings.themeColor);\n//   const navStyle = useSelector(({settings}) => settings.navStyle);\n//   const layoutType = useSelector(({settings}) => settings.layoutType);\n//\n//   console.log(\" in  customizer\", themeColor);\n//\n//   const handleColorChange = (filename) => {\n//     // console.log(\"filename\", filename);\n//     // let link = document.createElement('link');\n//     // link.type = 'text/css';\n//     // link.rel = 'stylesheet';\n//     // link.className = 'gx-style';\n//     // link.href = `/css/${filename}.css`;\n//\n//     // setTimeout(() => {\n//     //   const children = document.getElementsByClassName('gx-style');\n//     //\n//     //   if (children.length > 1) {\n//     //     for (let index = 0; index < children.length; index++) {\n//     //       if ((index + 1) < children.length) {\n//     //         const child = children[index];\n//     //         child.parentNode.removeChild(child);\n//     //       }\n//     //     }\n//     //   }\n//     // }, 10000);\n//     // console.log(\"my link \",link);\n//     // document.body.appendChild(link);\n//     // dispatch(setThemeColor(filename));\n//   };\n//\n//   const toggleCustomizer = () => {\n//     setIsCustomizerOpened(!isCustomizerOpened);\n//   };\n//\n//   const onThemeTypeChange = (e) => {\n//     dispatch(setThemeType(e.target.value));\n//   };\n//\n//   const onNavStyleChanges = (navStyle) => {\n//     dispatch(onNavStyleChange(navStyle));\n//   };\n//\n//   const getCustomizerContent = () => {\n//\n//     // if (themeType === THEME_TYPE_DARK) {\n//     //   document.body.classList.add('dark-theme');\n//     //   let link = document.createElement('link');\n//     //   link.type = 'text/css';\n//     //   link.rel = 'stylesheet';\n//     //   link.href = \"/css/dark_theme.css\";\n//     //   link.className = 'style_dark_theme';\n//     //   document.body.appendChild(link);\n//     // } else if (document.body.classList.contains('dark-theme')) {\n//     //   document.body.classList.remove('dark-theme');\n//     //   const children = document.getElementsByClassName('style_dark_theme');\n//     //   if (children.length > 1) {\n//     //     for (let index = 0; index < children.length; index++) {\n//     //       if (index < children.length) {\n//     //         const child = children[index];\n//     //         child.parentNode.removeChild(child);\n//     //       }\n//     //     }\n//     //   }\n//     }\n//\n//     return <CustomScrollbars className=\"gx-customizer\">\n//       <div className=\"gx-customizer-item\">\n//         <h6 className=\"gx-mb-3 gx-text-uppercase\">Theme</h6>\n//         <Radio.Group value={themeType} onChange={onThemeTypeChange}>\n//           <Radio.Button value={THEME_TYPE_LITE}>Lite</Radio.Button>\n//           <Radio.Button value={THEME_TYPE_SEMI_DARK}>Semi Dark</Radio.Button>\n//           <Radio.Button value={THEME_TYPE_DARK}>Dark</Radio.Button>\n//         </Radio.Group>\n//       </div>\n//       <div className=\"gx-customizer-item\">\n//         {getPresetColors(themeColor)}\n//       </div>\n//\n//       <h6 className=\"gx-mb-3 gx-text-uppercase\">Nav Style</h6>\n//\n//       {getNavStyles(navStyle)}\n//\n//       <h6 className=\"gx-mb-3 gx-text-uppercase\">Layout</h6>\n//\n//       {getLayoutsTypes(layoutType)}\n//     </CustomScrollbars>\n//   };\n//\n//   const handleThemeColor = (fileName) => {\n//     // handleColorChange(fileName);\n//   };\n//\n//   const handleLayoutTypes = (layoutType) => {\n//     // dispatch(onLayoutTypeChange(layoutType));\n//   };\n//\n//   const getPresetColors = (themeColor) => {\n//     return <ul className=\"gx-color-option gx-list-inline\">\n//\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"light_purple\")}\n//           style={{backgroundColor: LIGHT_PURPLE_SEC, color: LIGHT_PURPLE_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-light-purple ${themeColor === LIGHT_PURPLE && 'active'}`}/>\n//       </li>\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"red\")}\n//           style={{backgroundColor: RED_SEC, color: RED_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-red ${themeColor === RED && 'active'}`}/>\n//       </li>\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"blue\")}\n//           style={{backgroundColor: BLUE_SEC, color: BLUE_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-blue ${themeColor === BLUE && 'active'}`}/>\n//       </li>\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"dark_blue\")}\n//           style={{backgroundColor: DARK_BLUE_SEC, color: DARK_BLUE_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-dark-blue ${themeColor === DARK_BLUE && 'active'}`}/>\n//       </li>\n//\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"orange\")}\n//           style={{backgroundColor: ORANGE_SEC, color: ORANGE_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-orange ${themeColor === ORANGE && 'active'}`}/>\n//       </li>\n//\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"light_blue\")}\n//           style={{backgroundColor: LIGHT_BLUE_SEC, color: LIGHT_BLUE_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-light-blue ${themeColor === LIGHT_BLUE && 'active'}`}/>\n//       </li>\n//\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"deep_orange\")}\n//           style={{backgroundColor: DEEP_ORANGE_SEC, color: DEEP_ORANGE_DARK_TEXT_COLOR}}\n//           className={`gx-link gx-color-deep-orange ${themeColor === DEEP_ORANGE && 'active'}`}/>\n//       </li>\n//\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"light_purple_1\")}\n//           style={{\n//             backgroundColor: LIGHT_PURPLE_1_SEC,\n//             color: LIGHT_PURPLE_1_DARK_TEXT_COLOR\n//           }}\n//           className={`gx-link gx-color-light-purple1 ${themeColor === LIGHT_PURPLE_1 && 'active'}`}/>\n//       </li>\n//\n//       <li>\n//         <span\n//           onClick={() => handleThemeColor(\"light_purple_2\")}\n//           style={{\n//             backgroundColor: LIGHT_PURPLE_2_SEC,\n//             color: LIGHT_PURPLE_2_DARK_TEXT_COLOR\n//           }}\n//           className={`gx-link gx-color-light-purple2 ${themeColor === LIGHT_PURPLE_2 && 'active'}`}/>\n//       </li>\n//     </ul>\n//   };\n//\n//   const getLayoutsTypes = (layoutType) => {\n//     return <ul className=\"gx-layout-option gx-list-inline\">\n//       <li>\n//         <span onClick={() => handleLayoutTypes(LAYOUT_TYPE_FRAMED)}\n//               className={`gx-pointer ${layoutType === LAYOUT_TYPE_FRAMED && 'active'}`}>\n//         <img src={('/images/layouts/framed.png')} alt='framed'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => handleLayoutTypes(LAYOUT_TYPE_FULL)}\n//               className={`gx-pointer ${layoutType === LAYOUT_TYPE_FULL && 'active'}`}>\n//         <img src={('/images/layouts/full width.png')} alt='full width'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => handleLayoutTypes(LAYOUT_TYPE_BOXED)}\n//               className={`gx-pointer ${layoutType === LAYOUT_TYPE_BOXED && 'active'}`}>\n//         <img src={('/images/layouts/boxed.png')} alt='boxed'/>\n//         </span>\n//       </li>\n//     </ul>\n//   };\n//\n//   const getNavStyles = (navStyle) => {\n//     return <ul className=\"gx-nav-option gx-list-inline\">\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_FIXED)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_FIXED && 'active'}`}>\n//         <img src={('/images/layouts/fixed.png')} alt='fixed'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_MINI_SIDEBAR)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_MINI_SIDEBAR && 'active'}`}>\n//         <img src={('/images/layouts/mini sidebar.png')} alt='mini sidebar'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_DRAWER)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_DRAWER && 'active'}`}>\n//         <img src={('/images/layouts/drawer nav.png')} alt='drawer nav'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_NO_HEADER_MINI_SIDEBAR)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR && 'active'}`}>\n//         <img src={('/images/layouts/no header mini sidebar.png')} alt='no hader mini sidebar'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR && 'active'}`}>\n//         <img src={('/images/layouts/vertical no header.png')} alt='vertical no header'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_DEFAULT_HORIZONTAL)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_DEFAULT_HORIZONTAL && 'active'}`}>\n//         <img src={('/images/layouts/default horizontal.png')} alt='default horizontal'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_DARK_HORIZONTAL)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_DARK_HORIZONTAL && 'active'}`}>\n//         <img src={('/images/layouts/dark horizontal.png')} alt='dark horizontal'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_INSIDE_HEADER_HORIZONTAL)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_INSIDE_HEADER_HORIZONTAL && 'active'}`}>\n//         <img src={('/images/layouts/inside header horizontal.png')} alt='inside header horizontal'/>\n//         </span>\n//       </li>\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_BELOW_HEADER)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_BELOW_HEADER && 'active'}`}>\n//         <img src={('/images/layouts/below header.png')} alt='below header'/>\n//         </span>\n//       </li>\n//\n//       <li>\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_ABOVE_HEADER)}\n//               className={`gx-pointer ${navStyle === NAV_STYLE_ABOVE_HEADER && 'active'}`}>\n//         <img src={('/images/layouts/top to header.png')} alt='top to header'/>\n//         </span>\n//       </li>\n//     </ul>\n//   };\n//\n//   return (\n//     <>\n//       <Drawer\n//         placement=\"right\"\n//         closable={false}\n//         onClose={toggleCustomizer}\n//         visible={isCustomizerOpened}>\n//         {\n//           getCustomizerContent()\n//         }\n//       </Drawer>\n//       <div className=\"gx-customizer-option\">\n//         <Button type=\"primary\" onClick={toggleCustomizer}>\n//           <i className=\"icon icon-setting fxicon-hc-spin gx-d-block\"/>\n//         </Button>\n//       </div>\n//     </>\n//   );\n// };\n//\n// export default CustomizerSystem;\nimport React from 'react';\n\nvar Index = function Index() {\n  return __jsx(\"div\", null);\n};\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["D:/TemplateAdminPro/app/core/Customizer/index.js"],"names":["React","Index"],"mappingskB,OAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,SACE,kBADF;AAKD,CAND;;KAAMA,K;AAQN,eAAeA,KAAf","sourcesContent":["// import React, {useState} from \"react\";\r\n// import {Button, Drawer, Radio} from \"antd\";\r\n// import {useDispatch, useSelector} from \"react-redux\";\r\n// import CustomScrollbars from \"../../../util/CustomScrollbars\";\r\n// import {setThemeType} from \"../../../redux/actions/Setting\";\r\n//\r\n// import {\r\n//   BLUE,\r\n//   BLUE_DARK_TEXT_COLOR,\r\n//   BLUE_SEC,\r\n//   DARK_BLUE,\r\n//   DARK_BLUE_DARK_TEXT_COLOR,\r\n//   DARK_BLUE_SEC,\r\n//   DEEP_ORANGE,\r\n//   DEEP_ORANGE_DARK_TEXT_COLOR,\r\n//   DEEP_ORANGE_SEC,\r\n//   LAYOUT_TYPE_BOXED,\r\n//   LAYOUT_TYPE_FRAMED,\r\n//   LAYOUT_TYPE_FULL,\r\n//   LIGHT_BLUE,\r\n//   LIGHT_BLUE_DARK_TEXT_COLOR,\r\n//   LIGHT_BLUE_SEC,\r\n//   LIGHT_PURPLE,\r\n//   LIGHT_PURPLE_1,\r\n//   LIGHT_PURPLE_1_DARK_TEXT_COLOR,\r\n//   LIGHT_PURPLE_1_SEC,\r\n//   LIGHT_PURPLE_2,\r\n//   LIGHT_PURPLE_2_DARK_TEXT_COLOR,\r\n//   LIGHT_PURPLE_2_SEC,\r\n//   LIGHT_PURPLE_DARK_TEXT_COLOR,\r\n//   LIGHT_PURPLE_SEC,\r\n//   NAV_STYLE_ABOVE_HEADER,\r\n//   NAV_STYLE_BELOW_HEADER,\r\n//   NAV_STYLE_DARK_HORIZONTAL,\r\n//   NAV_STYLE_DEFAULT_HORIZONTAL,\r\n//   NAV_STYLE_DRAWER,\r\n//   NAV_STYLE_FIXED,\r\n//   NAV_STYLE_INSIDE_HEADER_HORIZONTAL,\r\n//   NAV_STYLE_MINI_SIDEBAR,\r\n//   NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n//   NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n//   ORANGE,\r\n//   ORANGE_DARK_TEXT_COLOR,\r\n//   ORANGE_SEC,\r\n//   RED,\r\n//   RED_DARK_TEXT_COLOR,\r\n//   RED_SEC,\r\n//   THEME_TYPE_DARK,\r\n//   THEME_TYPE_LITE,\r\n//   THEME_TYPE_SEMI_DARK\r\n// } from \"../../../constants/ThemeSetting\";\r\n// import {onNavStyleChange} from \"../../../redux/actions\";\r\n//\r\n// const CustomizerSystem = () => {\r\n//\r\n//   const [isCustomizerOpened, setIsCustomizerOpened] = useState(false);\r\n//   const dispatch = useDispatch();\r\n//\r\n//   const themeType = useSelector(({settings}) => settings.themeType);\r\n//   const themeColor = useSelector(({settings}) => settings.themeColor);\r\n//   const navStyle = useSelector(({settings}) => settings.navStyle);\r\n//   const layoutType = useSelector(({settings}) => settings.layoutType);\r\n//\r\n//   console.log(\" in  customizer\", themeColor);\r\n//\r\n//   const handleColorChange = (filename) => {\r\n//     // console.log(\"filename\", filename);\r\n//     // let link = document.createElement('link');\r\n//     // link.type = 'text/css';\r\n//     // link.rel = 'stylesheet';\r\n//     // link.className = 'gx-style';\r\n//     // link.href = `/css/${filename}.css`;\r\n//\r\n//     // setTimeout(() => {\r\n//     //   const children = document.getElementsByClassName('gx-style');\r\n//     //\r\n//     //   if (children.length > 1) {\r\n//     //     for (let index = 0; index < children.length; index++) {\r\n//     //       if ((index + 1) < children.length) {\r\n//     //         const child = children[index];\r\n//     //         child.parentNode.removeChild(child);\r\n//     //       }\r\n//     //     }\r\n//     //   }\r\n//     // }, 10000);\r\n//     // console.log(\"my link \",link);\r\n//     // document.body.appendChild(link);\r\n//     // dispatch(setThemeColor(filename));\r\n//   };\r\n//\r\n//   const toggleCustomizer = () => {\r\n//     setIsCustomizerOpened(!isCustomizerOpened);\r\n//   };\r\n//\r\n//   const onThemeTypeChange = (e) => {\r\n//     dispatch(setThemeType(e.target.value));\r\n//   };\r\n//\r\n//   const onNavStyleChanges = (navStyle) => {\r\n//     dispatch(onNavStyleChange(navStyle));\r\n//   };\r\n//\r\n//   const getCustomizerContent = () => {\r\n//\r\n//     // if (themeType === THEME_TYPE_DARK) {\r\n//     //   document.body.classList.add('dark-theme');\r\n//     //   let link = document.createElement('link');\r\n//     //   link.type = 'text/css';\r\n//     //   link.rel = 'stylesheet';\r\n//     //   link.href = \"/css/dark_theme.css\";\r\n//     //   link.className = 'style_dark_theme';\r\n//     //   document.body.appendChild(link);\r\n//     // } else if (document.body.classList.contains('dark-theme')) {\r\n//     //   document.body.classList.remove('dark-theme');\r\n//     //   const children = document.getElementsByClassName('style_dark_theme');\r\n//     //   if (children.length > 1) {\r\n//     //     for (let index = 0; index < children.length; index++) {\r\n//     //       if (index < children.length) {\r\n//     //         const child = children[index];\r\n//     //         child.parentNode.removeChild(child);\r\n//     //       }\r\n//     //     }\r\n//     //   }\r\n//     }\r\n//\r\n//     return <CustomScrollbars className=\"gx-customizer\">\r\n//       <div className=\"gx-customizer-item\">\r\n//         <h6 className=\"gx-mb-3 gx-text-uppercase\">Theme</h6>\r\n//         <Radio.Group value={themeType} onChange={onThemeTypeChange}>\r\n//           <Radio.Button value={THEME_TYPE_LITE}>Lite</Radio.Button>\r\n//           <Radio.Button value={THEME_TYPE_SEMI_DARK}>Semi Dark</Radio.Button>\r\n//           <Radio.Button value={THEME_TYPE_DARK}>Dark</Radio.Button>\r\n//         </Radio.Group>\r\n//       </div>\r\n//       <div className=\"gx-customizer-item\">\r\n//         {getPresetColors(themeColor)}\r\n//       </div>\r\n//\r\n//       <h6 className=\"gx-mb-3 gx-text-uppercase\">Nav Style</h6>\r\n//\r\n//       {getNavStyles(navStyle)}\r\n//\r\n//       <h6 className=\"gx-mb-3 gx-text-uppercase\">Layout</h6>\r\n//\r\n//       {getLayoutsTypes(layoutType)}\r\n//     </CustomScrollbars>\r\n//   };\r\n//\r\n//   const handleThemeColor = (fileName) => {\r\n//     // handleColorChange(fileName);\r\n//   };\r\n//\r\n//   const handleLayoutTypes = (layoutType) => {\r\n//     // dispatch(onLayoutTypeChange(layoutType));\r\n//   };\r\n//\r\n//   const getPresetColors = (themeColor) => {\r\n//     return <ul className=\"gx-color-option gx-list-inline\">\r\n//\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"light_purple\")}\r\n//           style={{backgroundColor: LIGHT_PURPLE_SEC, color: LIGHT_PURPLE_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-light-purple ${themeColor === LIGHT_PURPLE && 'active'}`}/>\r\n//       </li>\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"red\")}\r\n//           style={{backgroundColor: RED_SEC, color: RED_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-red ${themeColor === RED && 'active'}`}/>\r\n//       </li>\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"blue\")}\r\n//           style={{backgroundColor: BLUE_SEC, color: BLUE_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-blue ${themeColor === BLUE && 'active'}`}/>\r\n//       </li>\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"dark_blue\")}\r\n//           style={{backgroundColor: DARK_BLUE_SEC, color: DARK_BLUE_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-dark-blue ${themeColor === DARK_BLUE && 'active'}`}/>\r\n//       </li>\r\n//\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"orange\")}\r\n//           style={{backgroundColor: ORANGE_SEC, color: ORANGE_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-orange ${themeColor === ORANGE && 'active'}`}/>\r\n//       </li>\r\n//\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"light_blue\")}\r\n//           style={{backgroundColor: LIGHT_BLUE_SEC, color: LIGHT_BLUE_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-light-blue ${themeColor === LIGHT_BLUE && 'active'}`}/>\r\n//       </li>\r\n//\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"deep_orange\")}\r\n//           style={{backgroundColor: DEEP_ORANGE_SEC, color: DEEP_ORANGE_DARK_TEXT_COLOR}}\r\n//           className={`gx-link gx-color-deep-orange ${themeColor === DEEP_ORANGE && 'active'}`}/>\r\n//       </li>\r\n//\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"light_purple_1\")}\r\n//           style={{\r\n//             backgroundColor: LIGHT_PURPLE_1_SEC,\r\n//             color: LIGHT_PURPLE_1_DARK_TEXT_COLOR\r\n//           }}\r\n//           className={`gx-link gx-color-light-purple1 ${themeColor === LIGHT_PURPLE_1 && 'active'}`}/>\r\n//       </li>\r\n//\r\n//       <li>\r\n//         <span\r\n//           onClick={() => handleThemeColor(\"light_purple_2\")}\r\n//           style={{\r\n//             backgroundColor: LIGHT_PURPLE_2_SEC,\r\n//             color: LIGHT_PURPLE_2_DARK_TEXT_COLOR\r\n//           }}\r\n//           className={`gx-link gx-color-light-purple2 ${themeColor === LIGHT_PURPLE_2 && 'active'}`}/>\r\n//       </li>\r\n//     </ul>\r\n//   };\r\n//\r\n//   const getLayoutsTypes = (layoutType) => {\r\n//     return <ul className=\"gx-layout-option gx-list-inline\">\r\n//       <li>\r\n//         <span onClick={() => handleLayoutTypes(LAYOUT_TYPE_FRAMED)}\r\n//               className={`gx-pointer ${layoutType === LAYOUT_TYPE_FRAMED && 'active'}`}>\r\n//         <img src={('/images/layouts/framed.png')} alt='framed'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => handleLayoutTypes(LAYOUT_TYPE_FULL)}\r\n//               className={`gx-pointer ${layoutType === LAYOUT_TYPE_FULL && 'active'}`}>\r\n//         <img src={('/images/layouts/full width.png')} alt='full width'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => handleLayoutTypes(LAYOUT_TYPE_BOXED)}\r\n//               className={`gx-pointer ${layoutType === LAYOUT_TYPE_BOXED && 'active'}`}>\r\n//         <img src={('/images/layouts/boxed.png')} alt='boxed'/>\r\n//         </span>\r\n//       </li>\r\n//     </ul>\r\n//   };\r\n//\r\n//   const getNavStyles = (navStyle) => {\r\n//     return <ul className=\"gx-nav-option gx-list-inline\">\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_FIXED)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_FIXED && 'active'}`}>\r\n//         <img src={('/images/layouts/fixed.png')} alt='fixed'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_MINI_SIDEBAR)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_MINI_SIDEBAR && 'active'}`}>\r\n//         <img src={('/images/layouts/mini sidebar.png')} alt='mini sidebar'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_DRAWER)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_DRAWER && 'active'}`}>\r\n//         <img src={('/images/layouts/drawer nav.png')} alt='drawer nav'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_NO_HEADER_MINI_SIDEBAR)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR && 'active'}`}>\r\n//         <img src={('/images/layouts/no header mini sidebar.png')} alt='no hader mini sidebar'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR && 'active'}`}>\r\n//         <img src={('/images/layouts/vertical no header.png')} alt='vertical no header'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_DEFAULT_HORIZONTAL)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_DEFAULT_HORIZONTAL && 'active'}`}>\r\n//         <img src={('/images/layouts/default horizontal.png')} alt='default horizontal'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_DARK_HORIZONTAL)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_DARK_HORIZONTAL && 'active'}`}>\r\n//         <img src={('/images/layouts/dark horizontal.png')} alt='dark horizontal'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_INSIDE_HEADER_HORIZONTAL)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_INSIDE_HEADER_HORIZONTAL && 'active'}`}>\r\n//         <img src={('/images/layouts/inside header horizontal.png')} alt='inside header horizontal'/>\r\n//         </span>\r\n//       </li>\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_BELOW_HEADER)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_BELOW_HEADER && 'active'}`}>\r\n//         <img src={('/images/layouts/below header.png')} alt='below header'/>\r\n//         </span>\r\n//       </li>\r\n//\r\n//       <li>\r\n//         <span onClick={() => onNavStyleChanges(NAV_STYLE_ABOVE_HEADER)}\r\n//               className={`gx-pointer ${navStyle === NAV_STYLE_ABOVE_HEADER && 'active'}`}>\r\n//         <img src={('/images/layouts/top to header.png')} alt='top to header'/>\r\n//         </span>\r\n//       </li>\r\n//     </ul>\r\n//   };\r\n//\r\n//   return (\r\n//     <>\r\n//       <Drawer\r\n//         placement=\"right\"\r\n//         closable={false}\r\n//         onClose={toggleCustomizer}\r\n//         visible={isCustomizerOpened}>\r\n//         {\r\n//           getCustomizerContent()\r\n//         }\r\n//       </Drawer>\r\n//       <div className=\"gx-customizer-option\">\r\n//         <Button type=\"primary\" onClick={toggleCustomizer}>\r\n//           <i className=\"icon icon-setting fxicon-hc-spin gx-d-block\"/>\r\n//         </Button>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n//\r\n// export default CustomizerSystem;\r\nimport React from 'react';\r\n\r\nconst Index = () => {\r\n  return (\r\n    <div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}