{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { fetchStickySuccess } from '../actions';\nimport { database } from '../../firebaseConfig/index';\nimport { GET_STICKY, NOTES_UPDATE } from '../../constants/ActionTypes';\nimport { fetchError } from \"../actions\";\n\nconst getSticky = async () => await database.ref('notes').once('value').then(snapshot => {\n  const notess = [];\n  snapshot.forEach(rawData => {\n    notess.push(rawData.val());\n  });\n  return notess;\n}).catch(error => error);\n\nconst updateStickyRequest = async ({\n  notesList\n}) => {\n  await database.ref('notes').set(notesList).then(notesList => notesList).catch(notesList => notesList);\n};\n\nfunction* fetchStickyRequest() {\n  try {\n    const fetchedSticky = yield call(getSticky);\n    yield put(fetchStickySuccess(fetchedSticky));\n  } catch (error) {\n    yield put(fetchError(error));\n  }\n}\n\nexport function* fetchSticky() {\n  yield takeEvery(GET_STICKY, fetchStickyRequest);\n}\nexport function* updateSticky() {\n  yield takeEvery(NOTES_UPDATE, updateStickyRequest);\n}\nexport default function* rootSaga() {\n  yield all([fork(fetchSticky), fork(updateSticky)]);\n}","map":{"version":3,"sources":["C:/Users/linhm/Downloads/Telegram Desktop/TemplateNextjs/redux/sagas/Notes.js"],"names":["all","call","fork","put","takeEvery","fetchStickySuccess","database","GET_STICKY","NOTES_UPDATE","fetchError","getSticky","ref","once","then","snapshot","notess","forEach","rawData","push","val","catch","error","updateStickyRequest","notesList","set","fetchStickyRequest","fetchedSticky","fetchSticky","updateSticky","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,QAA8C,oBAA9C;AACA,SAAQC,kBAAR,QAAiC,YAAjC;AACA,SAAQC,QAAR,QAAuB,4BAAvB;AACA,SAAQC,UAAR,EAAoBC,YAApB,QAAuC,6BAAvC;AACA,SAAQC,UAAR,QAAyB,YAAzB;;AAEA,MAAMC,SAAS,GAAG,YAChB,MAAMJ,QAAQ,CAACK,GAAT,CAAa,OAAb,EAAsBC,IAAtB,CAA2B,OAA3B,EACHC,IADG,CACGC,QAAD,IAAc;AAClB,QAAMC,MAAM,GAAG,EAAf;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5BF,IAAAA,MAAM,CAACG,IAAP,CAAYD,OAAO,CAACE,GAAR,EAAZ;AACD,GAFD;AAGA,SAAOJ,MAAP;AACD,CAPG,EAQHK,KARG,CAQGC,KAAK,IAAIA,KARZ,CADR;;AAYA,MAAMC,mBAAmB,GAAG,OAAO;AAACC,EAAAA;AAAD,CAAP,KAAuB;AACjD,QAAOjB,QAAQ,CAACK,GAAT,CAAa,OAAb,EAAsBa,GAAtB,CAA0BD,SAA1B,EACJV,IADI,CACCU,SAAS,IAAIA,SADd,EAEJH,KAFI,CAEEG,SAAS,IAAIA,SAFf,CAAP;AAGD,CAJD;;AAMA,UAAUE,kBAAV,GAA+B;AAC7B,MAAI;AACF,UAAMC,aAAa,GAAG,MAAMzB,IAAI,CAACS,SAAD,CAAhC;AACA,UAAMP,GAAG,CAACE,kBAAkB,CAACqB,aAAD,CAAnB,CAAT;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACM,UAAU,CAACY,KAAD,CAAX,CAAT;AACD;AACF;;AAED,OAAO,UAAUM,WAAV,GAAwB;AAC7B,QAAMvB,SAAS,CAACG,UAAD,EAAakB,kBAAb,CAAf;AACD;AAED,OAAO,UAAUG,YAAV,GAAyB;AAC9B,QAAMxB,SAAS,CAACI,YAAD,EAAec,mBAAf,CAAf;AACD;AAED,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CAACE,IAAI,CAACyB,WAAD,CAAL,EACRzB,IAAI,CAAC0B,YAAD,CADI,CAAD,CAAT;AAED","sourcesContent":["import {all, call, fork, put, takeEvery} from \"redux-saga/effects\";\r\nimport {fetchStickySuccess} from '../actions';\r\nimport {database} from '../../firebaseConfig/index';\r\nimport {GET_STICKY, NOTES_UPDATE} from '../../constants/ActionTypes';\r\nimport {fetchError} from \"../actions\";\r\n\r\nconst getSticky = async () =>\r\n  await database.ref('notes').once('value')\r\n    .then((snapshot) => {\r\n      const notess = [];\r\n      snapshot.forEach((rawData) => {\r\n        notess.push(rawData.val());\r\n      });\r\n      return notess;\r\n    })\r\n    .catch(error => error);\r\n\r\n\r\nconst updateStickyRequest = async ({notesList}) => {\r\n  await  database.ref('notes').set(notesList)\r\n    .then(notesList => notesList)\r\n    .catch(notesList => notesList);\r\n};\r\n\r\nfunction* fetchStickyRequest() {\r\n  try {\r\n    const fetchedSticky = yield call(getSticky);\r\n    yield put(fetchStickySuccess(fetchedSticky));\r\n  } catch (error) {\r\n    yield put(fetchError(error));\r\n  }\r\n}\r\n\r\nexport function* fetchSticky() {\r\n  yield takeEvery(GET_STICKY, fetchStickyRequest);\r\n}\r\n\r\nexport function* updateSticky() {\r\n  yield takeEvery(NOTES_UPDATE, updateStickyRequest);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(fetchSticky),\r\n    fork(updateSticky)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}