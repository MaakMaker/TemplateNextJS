{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers';\nimport rootSaga from '../sagas';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nfunction configureStore(initialState = {}) {\n  const store = createStore(reducers, initialState, bindMiddleware([thunk, sagaMiddleware]));\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga(); // dispatch saga tasks\n\n    tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n    await store.stopSaga(); // Re-run on client side\n\n    if (!isServer) {\n      store.runSaga();\n    }\n  }; // Initial run\n\n\n  store.runSaga();\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["C:/Users/linhm/Downloads/Telegram Desktop/TemplateNextjs/redux/store/index.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","END","thunk","reducers","rootSaga","sagaMiddleware","bindMiddleware","middleware","composeWithDevTools","require","configureStore","initialState","store","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks"],"mappings":"AAAA,SAAQA,eAAR,EAAyBC,WAAzB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,IAA8BC,GAA9B,QAAwC,YAAxC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAOC,QAAP,MAAqB,UAArB;AAEA,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;;AAEA,MAAMM,cAAc,GAAGC,UAAU,IAAI;AACnC,YAA2C;AACzC,UAAM;AAACC,MAAAA;AAAD,QAAwBC,OAAO,CAAC,0BAAD,CAArC;;AACA,WAAOD,mBAAmB,CAACV,eAAe,CAAC,GAAGS,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOT,eAAe,CAAC,GAAGS,UAAJ,CAAtB;AACD,CAND;;AAQA,SAASG,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2C;AACzC,QAAMC,KAAK,GAAGb,WAAW,CACvBI,QADuB,EAEvBQ,YAFuB,EAGvBL,cAAc,CAAC,CAACJ,KAAD,EAAQG,cAAR,CAAD,CAHS,CAAzB;;AAMAO,EAAAA,KAAK,CAACC,OAAN,GAAgB,MAAM;AACpB;AACA,QAAID,KAAK,CAACE,IAAV,EAAgB;AAChBF,IAAAA,KAAK,CAACE,IAAN,GAAaT,cAAc,CAACU,GAAf,CAAmBX,QAAnB,CAAb;AACD,GAJD;;AAMAQ,EAAAA,KAAK,CAACI,QAAN,GAAiB,YAAY;AAC3B;AACA,QAAI,CAACJ,KAAK,CAACE,IAAX,EAAiB;AACjBF,IAAAA,KAAK,CAACK,QAAN,CAAehB,GAAf;AACA,UAAMW,KAAK,CAACE,IAAN,CAAWI,IAAjB;AACAN,IAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACD,GAND;;AAQAF,EAAAA,KAAK,CAACO,aAAN,GAAsB,OAAOC,QAAP,EAAiBC,KAAjB,KAA2B;AAC/C;AACAT,IAAAA,KAAK,CAACC,OAAN,GAF+C,CAG/C;;AACAQ,IAAAA,KAAK,CAACT,KAAK,CAACK,QAAP,CAAL,CAJ+C,CAK/C;;AACA,UAAML,KAAK,CAACI,QAAN,EAAN,CAN+C,CAO/C;;AACA,QAAI,CAACI,QAAL,EAAe;AACbR,MAAAA,KAAK,CAACC,OAAN;AACD;AACF,GAXD,CArByC,CAkCzC;;;AACAD,EAAAA,KAAK,CAACC,OAAN;AAEA,SAAOD,KAAP;AACD;;AAED,eAAeF,cAAf","sourcesContent":["import {applyMiddleware, createStore} from 'redux';\r\nimport createSagaMiddleware, {END} from 'redux-saga';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from '../reducers';\r\n\r\nimport rootSaga from '../sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst bindMiddleware = middleware => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const {composeWithDevTools} = require('redux-devtools-extension');\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nfunction configureStore(initialState = {}) {\r\n  const store = createStore(\r\n    reducers,\r\n    initialState,\r\n    bindMiddleware([thunk, sagaMiddleware])\r\n  );\r\n\r\n  store.runSaga = () => {\r\n    // Avoid running twice\r\n    if (store.saga) return;\r\n    store.saga = sagaMiddleware.run(rootSaga);\r\n  };\r\n\r\n  store.stopSaga = async () => {\r\n    // Avoid running twice\r\n    if (!store.saga) return;\r\n    store.dispatch(END);\r\n    await store.saga.done;\r\n    store.saga = null;\r\n  };\r\n\r\n  store.execSagaTasks = async (isServer, tasks) => {\r\n    // run saga\r\n    store.runSaga();\r\n    // dispatch saga tasks\r\n    tasks(store.dispatch);\r\n    // Stop running and wait for the tasks to be done\r\n    await store.stopSaga();\r\n    // Re-run on client side\r\n    if (!isServer) {\r\n      store.runSaga();\r\n    }\r\n  };\r\n\r\n  // Initial run\r\n  store.runSaga();\r\n\r\n  return store;\r\n}\r\n\r\nexport default configureStore;\r\n"]},"metadata":{},"sourceType":"module"}