{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FETCH_ALL_NOTES_SUCCESS, GET_STICKY, NOTES_UPDATE, UPDATE_ALL_NOTES_SUCCESS } from \"../../constants/ActionTypes\";\nconst INIT_STATE = {\n  notesList: []\n};\nexport default ((state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_STICKY:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notesList: action.notesList\n        });\n      }\n\n    case FETCH_ALL_NOTES_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notesList: action.payload\n        });\n      }\n\n    case UPDATE_ALL_NOTES_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          notesList: action.payload\n        });\n      }\n\n    case NOTES_UPDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notesList: action.notesList\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/linhm/Downloads/Telegram Desktop/TemplateNextjs/redux/reducers/Notes.js"],"names":["FETCH_ALL_NOTES_SUCCESS","GET_STICKY","NOTES_UPDATE","UPDATE_ALL_NOTES_SUCCESS","INIT_STATE","notesList","state","action","type","payload"],"mappings":";;;;;;AAAA,SACEA,uBADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,wBAJF,QAKO,6BALP;AAOA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE;AADM,CAAnB;AAKA,gBAAe,CAACC,KAAK,GAAGF,UAAT,EAAqBG,MAArB,KAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,UAAL;AAAiB;AACf,+CACKK,KADL;AAEED,UAAAA,SAAS,EAAEE,MAAM,CAACF;AAFpB;AAID;;AAED,SAAKL,uBAAL;AAA8B;AAC5B,+CACKM,KADL;AAEED,UAAAA,SAAS,EAAEE,MAAM,CAACE;AAFpB;AAID;;AAED,SAAKN,wBAAL;AAA+B;AAC7B,+CACKG,KADL;AAEED,UAAAA,SAAS,EAAEE,MAAM,CAACE;AAFpB;AAID;;AAED,SAAKP,YAAL;AACE,6CACKI,KADL;AAEED,QAAAA,SAAS,EAAEE,MAAM,CAACF;AAFpB;;AAKF;AACE,aAAOC,KAAP;AA9BJ;AAgCD,CAjCD","sourcesContent":["import {\r\n  FETCH_ALL_NOTES_SUCCESS,\r\n  GET_STICKY,\r\n  NOTES_UPDATE,\r\n  UPDATE_ALL_NOTES_SUCCESS\r\n} from \"../../constants/ActionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  notesList: []\r\n};\r\n\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    case GET_STICKY: {\r\n      return {\r\n        ...state,\r\n        notesList: action.notesList,\r\n      }\r\n    }\r\n\r\n    case FETCH_ALL_NOTES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        notesList: action.payload,\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_NOTES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        notesList: action.payload,\r\n      }\r\n    }\r\n\r\n    case NOTES_UPDATE:\r\n      return {\r\n        ...state,\r\n        notesList: action.notesList,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}